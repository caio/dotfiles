Mapping the fn keys in the keyboard to useful things

   Some of the keys in my thinkpad are not handled by default or aren't
   recognized at all. This is me trying to use them.

Figuring out what needs to be done

   I do know that this is somehow related to acpi, so that's where I'm
   starting from. The Thinkpad ACPI Guide [GUIDE] in the kernel docss
   has been a great source of information.

   So, I'll run the acpi_listen command and (hopefully) it'll output
   what the driver sees:

      $ acpi_listen
      button/f20 F20 00000080 00000000 K       # micmute
      ibm/hotkey LEN0268:00 00000080 00001317  # F9  (lolballon?)
      ibm/hotkey LEN0268:00 00000080 00001318  # F10 (telephone on)
      ibm/hotkey LEN0268:00 00000080 00001319  # F11 (telephone off)

Basic undestanding of the acpi_listen output

   The first line in the output starts with button/f20 followed by F20,
   this tells me that the keypress was identified as a button and mapped
   to F20. Anything that maps key presses to actions should be able
   to see and react to this button. I wonder if the K at the end signals
   that it has been successfully mapped, but my F12 hotkey is mapped to
   XF86Favorites and doesn't generate this last "K" column.

   The other lines, however, are under the ibm/hotkey namespace with
   the second column containing what I believe is the acpi hotkey id
   and what follows is probably what would allow me to differentiate
   between them. What matters right now is that these keypresses are
   invisible to userspace and reacting to those will probably be more
   involved than the F20 key from before.

Aside: Udev, hwdb and mapping hardware device events to keys

   It's thanks to Udev that we have that F20 visible to userspace
   without having to do anything special: it uses the Hardware Database
   [HWDB] to associate the acpi events to actual key symbols, but I
   couldn't find how to correctly specify the patterns without a very
   tiresome trial-and-error approach, so I decided to not touch this
   at all. I'll pretend it doesn't exist.

Executing commands when an acpi event happens

   The acpi daemon [ACPID] is activelly listening for acpi events
   and dispatching commands when they happen. In my linux distribution
   there's a /etc/acpi/events/anything file, which instructs the acpi
   daemon to call the /etc/acpi/handler.sh script for every event.

   We'll create a script that handles the acpi events that we care
   about. For it to work we need to create something that looks like
   the "anything" file from above. Say:

       $ cat /etc/acpi/events/ibm_hotkey
       event=ibm/hotkey
       action=/path/to/my/handler.sh %e

   So now when any acpi event within the "ibm/hotkey" group happens,
   the daemon will execute the action /path/to/my/handler.sh and
   provide the event as an input:

      $ cat /path/to/my/handler.sh
      logger -t HUEHUE "Group: $1 Action: $2 ???: $3 ???: $4"

Getting acpid to execute our custom handler

   The acpi daemon is started early in the bood proccess and doesn't
   automatically pick changes to its configuration. We can trigger
   a reload via:

      # kill -SIGHUP $(pidof acpid)

   Now acpid will try to load our custom event specification. It should
   write an entry to your logger so if it worked you'd see something
   like the following:

      $ journalctl -e -u acpid.service
      acpid[XXXX]: reloading configuration
      acpid[XXXX]: 4 rules loaded

   And now if we press the keys we're trying to customize, the logs
   will output something like:

      $ journalctl -u acpid.service | grep HUEHUE
      HUEHUE[XXXX]: Group: ibm/hotkey Action: LEN0268:00 ???: 00000080 ???: 00001317

   Time to get on with making our handler do something useful :-)

References

   [GUIDE]  Thinkpad ACPI Guide
            https://www.kernel.org/doc/html/latest/admin-guide/laptops/thinkpad-acpi.html

   [HWDB]   hwdb - Hardware Database
            https://www.freedesktop.org/software/systemd/man/hwdb.html

   [ACPID]  acpid(8) - Linux man page
            https://linux.die.net/man/8/acpid
